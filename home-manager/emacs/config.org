* Look into the =M-/= keybinding what the hell does it do
* Learn sed!/awk!/perl?
* NOTE Keybinding for org store linke and org insert link

* Disable use package
All packages shoud be installed by nix, use package is just there to ensure that there is consistent configuration between packages, use package should never install a packages just configure
#+begin_src emacs-lisp
(setq use-package-always-ensure nil)
#+end_src
- :init executes before package is loaded
- :config executes after a package is loaded
- :bind is neat becaus al binds can be accesed with =describe-personal-bindings=
* Evil mode
#+begin_src emacs-lisp
(use-package evil
    :init      ;; tweak evil's configuration before loading it
    (setq evil-want-integration t  ;; This is optional since it's already set to t by default.
          evil-want-keybinding nil
          evil-vsplit-window-right t
          evil-split-window-below t
          evil-undo-system 'undo-redo)  ;; Adds vim-like C-r redo functionality
    (evil-mode))

(global-unset-key (kbd "C-u"))
(global-set-key (kbd "C-u" ) 'evil-scroll-up)
                ;; Expands to: (elpaca evil (use-package evil :demand t))
(evil-commentary-mode) ;; hit gc on a region to comment it
(evil-goggles-mode) ;; shows what you command did

;; Set evil keybindings in the minibuffer
(setq evil-want-minibuffer t)

;; Rebind C-n and C-p to next and previous in the minibuffer with evil mode enabled
(defun my/setup-minibuffer ()
  (evil-local-set-key 'insert (kbd "C-n") 'next-line)
  (evil-local-set-key 'insert (kbd "C-p") 'previous-line))

(add-hook 'minibuffer-setup-hook 'my/setup-minibuffer)



;; Chat gpt code to save the last thing entered into async shell command

;; (defvar my/last-async-command ""
;;   "The last asynchronous command executed.")

;; (defun my/save-last-async-command (command &rest r)
;;   "Save the last asynchronous command executed."
;;   (setq my/last-async-command command))

;; (advice-add 'async-shell-command :before 'my/save-last-async-command)

;; (defun my/async-shell-command-with-last (command &optional output-buffer error-buffer)
;;   "Run an asynchronous shell command with the last command as default."
;;   (interactive (list (read-shell-command "Async shell command: " my/last-async-command)))
;;   (async-shell-command command output-buffer error-buffer))

;; (global-set-key (kbd "M-&") 'my/async-shell-command-with-last)

(use-package evil-collection
  :after evil
  :config
  ;; Do not uncomment this unless you want to specify each and every mode
  ;; that evil-collection should works with.  The following line is here
  ;; for documentation purposes in case you need it.
  ;; (setq evil-collection-mode-list '(calendar dashboard dired ediff info magit ibuffer))
  (add-to-list 'evil-collection-mode-list 'help) ;; evilify help mode
  (evil-collection-init))

;; (use-package evil-tutor)

;; Using RETURN to follow links in Org/Evil
;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
(with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-motion-state-map (kbd "TAB") nil))
;; Setting RETURN key in org-mode to follow links
  (setq org-return-follows-link  t)

;; PDFs



#+end_src
* Zooming
#+begin_src emacs-lisp :angle yes
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease) ;; Make this work with track ball # TODO
#+end_src
* Diminsh
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src


* Move backups to trash
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src

* Fonts faces

#+begin_src emacs-lisp

(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "JetBrains Mono"
  :height 120
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height 110
  :weight 'medium)
;; Makes commented text and keywords italics.
;; This is working in emacsclient but not emacs.
;; Your font must have an italic face available.
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

;; This sets the default font on all graphical frames created after restarting Emacs.
;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
;; are not right unless I also add this method of setting the default font.
;; You can use the lisp expression (font-family-list) to see all fonts listed out
(add-to-list 'default-frame-alist '(font . "Comic Code Ligatures"))
;; (set-frame-font "Comic Code Ligatures" nit t)

;; Uncomment the following line if line spacing needs adjusting.
(setq-default line-spacing 0.12)


#+end_src
* Rainbow Delimeter

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
;; (add-hook 'org-mode-hook #'rainbow-delimiters-mode) ;; you dont need this mode as src blocks are prog mode
)


#+end_src

#+RESULTS:
: t

* TODO Dashboard
Nice splash screen on startup
TODO Need to make a nice image for the splash screen
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;; (setq dashboard-startup-banner (concat default-directory "emacs.png") )  ;; use custom image as banner
  ;; (setq dashboard-startup-banner "/home/malcolm/nix-dotfiles/home-manager/emacs/emacs.png" )  ;; use custom image as banner
  (setq dashboard-startup-banner "/home/malcolm/Downloads/emacs-dash.svg" )  ;; use custom image as banner

  
                                            

  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
				      (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src

#+RESULTS:
: t

* Dired open
Opens third party application when I want to open a file from dired like a mp4 or an image


#+begin_src emacs-lisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

#+end_src

* Dired Preview
When cycling through a directory is thows the file on the right
#+begin_src emacs-lisp

(use-package dired-preview
  :init (dired-preview-global-mode 1)
  :config 
    (setq dired-dwim-target t)
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "SPC") nil)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
    (add-hook 'dired-mode-hook #'dired-hide-details-mode)
    (setq insert-directory-program "ls")
    (setq dired-preview-delay 0.7)
    (setq dired-preview-ignored-extensions-regexp
      (concat "\\."
              "\\(mkv\\|webm\\|mp4\\|mp3\\|ogg\\|m4a"
              "\\|gz\\|zst\\|tar\\|xz\\|rar\\|zip"
              "\\|iso\\|epub\\|pdf\\)")))




#+end_src


* Regisers

#+begin_src emacs-lisp
(set-register ?D '(file . "/home/malcolm/Documents"))
(set-register ?d '(file . "/home/malcolm/Downloads"))
(set-register ?c '(file . "/home/malcolm/clones"))
(set-register ?i '(file . "/home/malcolm/nix-dotfiles/home-manager/emacs/config.org"))
(set-register ?S '(file . "/home/malcolm/Pictures/Screenshots/"))
(set-register ?P '(file . "/home/malcolm/Projects"))
(set-register ?c '(file . "/home/malcolm/nix-dotfiles/nixos/configuration.nix"))
(set-register ?e '(file . "/home/malcolm/nix-dotfiles/home-manager/emacs/config.el"))
;; Temorary todo list for <2023-04-09 Sun>
(set-register ?h '(file . "/home/malcolm/nix-dotfiles/home-manager/home.nix"))
#+end_src
* General Keybindigs

#+begin_src emacs-lisp

(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer mk/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "C-SPC" ;; set leader
    :global-prefix "C-SPC") ;; access leader in insert mode


  (mk/leader-keys
    "SPC" '((execute-extended-command 0) :wk "Counsel M-x")
    "." '(find-file :wk "Find file")
    "," '(switch-to-buffer :wk "Switch buffer") ; TODO I want this to only switch to workspace buffers
    "<" '(switch-to-buffer :wk "Switch buffer") ; TODO I want this to switch to global buffers
    "-" '(perspective-map :wk "Perspective") ;; Lists all the perspective keybindings
    "TAB TAB" '(comment-line :wk "Comment lines")
    "u" '(universal-argument :wk "Universal argument"))
  ;; Allow evil to bind this key

  (mk/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch to buffer")
    "b c" '(clone-indirect-buffer :wk "Create indirect buffer copy in a split")
    "b C" '(clone-indirect-buffer-other-window :wk "Clone indirect buffer in new window")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b D" '(kill-buffer :wk "kill buffer from list")
    "b i" '(ibuffer :wk "Ibuffer")
    "b k" '(kill-current-buffer :wk "Kill current buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmarks to bookmark file"))

  (mk/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))

  (mk/leader-keys
    "e" '(:ignore t :wk "Eshell/Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e h" '(counsel-esh-history :which-key "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e R" '(eww-reload :which-key "Reload current page in EWW")
    "e s" '(eshell :which-key "Eshell")
    "e i" '(ielm :which-key "ielm")
    "e w" '(eww :which-key "EWW emacs web wowser"))

  (mk/leader-keys
    "/" '(:ignore t :wk "Files")
    "/ h" '((lambda () (interactive)
              (find-file "~/nix-dotfiles/home-manager/home.nix"))
            :wk "Open home manager configuration")
    "/ n" '((lambda () (interactive)
              (find-file "~/nix-dotfiles/nixos/configuration.nix"))
            :wk "Open nixos configuration")
    "/ c" '((lambda () (interactive)
              (find-file "~/nix-dotfiles/home-manager/emacs/config.org"))
            :wk "Open emacs config.org")
    "/ e" '((lambda () (interactive)
              (dired "~/nix-dotfiles/home-manager/emacs/config.org"))
            :wk "Open user-emacs-directory in dired")
    "/ a" '(save-buffer :wk "Save file")
    "/ d" '(find-grep-dired :wk "Search for string in files in DIR")
    "/ g" '(counsel-grep-or-swiper :wk "Search for string current file")
    "/ i" '(insert-file :wk "Insert File")
    ;; "/ j" '(counsel-file-jump :wk "Jump to a file below current directory")
    "/ l" '(counsel-locate :wk "Locate a file")
    ;; "/ r" '(counsel-recentf :wk "Find recent files")
    "/ u" '(sudo-edit-find-file :wk "Sudo find file")
    "/ r" '(jump-to-register :wk "Register jumping")
    "/ U" '(sudo-edit :wk "Sudo edit file"))

  (mk/leader-keys
    "g" '(:ignore t :wk "Git")
    "g /" '(magit-displatch :wk "Magit dispatch")
    "g ." '(magit-file-displatch :wk "Magit file dispatch")
    "g b" '(magit-branch-checkout :wk "Switch branch")
    "g c" '(:ignore t :wk "Create")
    "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
    "g c c" '(magit-commit-create :wk "Create commit")
    "g c f" '(magit-commit-fixup :wk "Create fixup commit")
    "g C" '(magit-clone :wk "Clone repo")
    "g f" '(:ignore t :wk "Find")
    "g f c" '(magit-show-commit :wk "Show commit")
    "g f f" '(magit-find-file :wk "Magit find file")
    "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
    "g F" '(magit-fetch :wk "Git fetch")
    "g g" '(magit-status :wk "Magit status")
    "g i" '(magit-init :wk "Initialize git repo")
    "g l" '(magit-log-buffer-file :wk "Magit buffer log")
    "g r" '(vc-revert :wk "Git revert file")
    "g s" '(magit-stage-file :wk "Git stage file")
    "g t" '(git-timemachine :wk "Git time machine")
    "g u" '(magit-stage-file :wk "Git unstage file"))

 (mk/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
    "h d m" '(info-emacs-manual :wk "The Emacs manual")
    "h d n" '(view-emacs-news :wk "View Emacs news")
    "h d o" '(describe-distribution :wk "How to obtain Emacs")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h d w" '(describe-no-warranty :wk "Describe no warranty")
    "h e" '(view-echo-area-messages :wk "View echo area messages")
    "h f" '(describe-function :wk "Describe function")
    "h F" '(describe-face :wk "Describe face")
    "h g" '(describe-gnu-project :wk "Describe GNU Project")
    "h i" '(info :wk "Info")
    "h I" '(describe-input-method :wk "Describe input method")
    "h k" '(describe-key :wk "Describe key")
    "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h t" '(load-theme :wk "Load theme")
    "h q" '(disable-theme :wk "Disable theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h w" '(where-is :wk "Prints keybinding for command if set")
    "h x" '(describe-command :wk "Display full documentation for command"))

 
  (mk/leader-keys
    "n" '(:ignore t :wk "Org")
    "n f" '(org-roam-node-find :wk "Org roam node find")
    "n r" '(org-roam-node-random :wk "Org roam node random")
    "n i" '(org-roam-node-insert :wk "Org roam node insert"))

  ; TODO Make all the org mode keys o and the open keys something else entirely
  (mk/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org [a]genda")
    "m e" '(org-export-dispatch :wk "Org [e]xport dispatch")
    "m i" '(org-toggle-item :wk "Org toggle [i]tem")
    "m I" '(org-toggle-inline-images :wk "Org toggle inline [I]mages")
    "m s" '(org-todo :wk "Org todo [s]tate")
    "m p" '(org-priority :wk "Org [p]riority")
    "m b" '(org-babel-tangle :wk "Org [b]abel tangle")
    "m E" '(org-babel-execute-buffer :wk "[E]xecute all src blocks in buffer")
    "m T" '(org-todo-list :wk "Org [T]ODO list"))

  (mk/leader-keys
    "m t" '(:ignore t :wk "[t]ables")
    ;; "m t i" '(org-table-insert-hline :wk "[I]nsert hline in table")
    "m t c" '(org-table-toggle-coordinate-overlays :wk "Toggle [c]ordinate overlays")
    "m t ?" '(org-table-field-info :wk "Find info on org table")
  "m t n" '(org-table-create-or-convert-from-region :wk "Create a [n]ew table")
  "m t e" '(org-table-eval-formula :wk "Create an org table [e]quation")
  "m t *" '((org-table-recalculate) :wk "Recalulate the whole table")
  "m t s" '(org-table-sort-lines :wk "[S]ort the table")
  "m t h" '(org-table-insert-hline :wk "Insert [h]orizontal line into the table")
  "m t d" '(org-table-toggle-formula-debugger :wk "Toggle table [d]ebugging"))



  (mk/leader-keys
    "m d" '(:ignore t :wk "Date/deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))
  


  (mk/leader-keys
    "o" '(:ignore t :wk "Open")
    "o d" '(dashboard-open :wk "Dashboard")
    "o e" '(elfeed :wk "Elfeed RSS")
    "o f" '(make-frame :wk "Open buffer in new frame")
    "o m" '(imenu :wk "imenu")
    "o r" '(regexp-builder :wk "Build up a regexp")
    "o t" '(vterm-toggle :wk "Toggle vterm")
    "o F" '(select-frame-by-name :wk "Select frame by name"))

  ;; projectile-command-map already has a ton of bindings
  ;; set for us, so no need to specify each individually.
  (mk/leader-keys
    "p" '(projectile-command-map :wk "Projectile"))
    ;; "p ." '(projectile-find-file :wk "Projectile find file"))

  (mk/leader-keys
    "s" '(:ignore t :wk "Search")
    "s d" '(dictionary-search :wk "Search dictionary")
    "s m" '(man :wk "Man pages")
    "s t" '(tldr :wk "Lookup TLDR docs for a command")
    "s w" '(woman :wk "Similar to man but doesn't require man"))

  (mk/leader-keys
    "t" '(:ignore t :wk "Toggle")
    "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t n" '(neotree-toggle :wk "Toggle neotree file viewer")
    "t o" '(org-mode :wk "Toggle org mode")
    "t r" '(rainbow-mode :wk "Toggle rainbow mode")
    "t t" '(visual-line-mode :wk "Toggle truncated lines"))

  (mk/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits

    "w r" '(hydra-shap-screen/body :wk "Shape window")

    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    "w e" '(delete-other-windows :wk "Delete all other windows")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w o" '(other-window :wk "Other window")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "C-S-n" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))
  )


#+end_src

* Sane

#+begin_src emacs-lisp
(global-set-key (kbd "<escape>" ) 'keyboard-escape-quit) ; esc to quit minibuffer
(defalias 'yes-or-no-p 'y-or-n-p) ; replace yes and no with y,n
(delete-selection-mode 1) ; You can select text and delete it by typing.
(electric-indent-mode -1) ; Turn off the weird indenting that Emacs does by default.
(electric-pair-mode 1) ; Turns on automatic parens pairing
;; The following prevents <> from auto-pairing when electric-pair-mode is on.
;; Otherwise, org-tempo is broken when you try to <s TAB...

(setq ring-bell-function 'ignore);; mad annoying remove visual and audio bell
(setq visible-bell nil) 

(add-hook 'org-mode-hook (lambda ()
           (setq-local electric-pair-inhibit-predicate
                   `(lambda (c)
                  (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
(global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
(global-display-line-numbers-mode 1) ;; Display line numbers
(global-visual-line-mode t)  ;; Enable truncated lines
(global-display-line-numbers-mode -1) ;; Who the hell needs line numbers there ugly
;; Set default window margins
(add-hook 'window-configuration-change-hook
          (lambda ()
            (set-window-margins nil 10 10)))  ; Replace 10 with your desired margin width
(menu-bar-mode -1)           ;; Disable the menu bar
(scroll-bar-mode -1)         ;; Disable the scroll bar
(tool-bar-mode -1)           ;; Disable the tool bar
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.

;; Using things like Async shell you can now use C-p to go to the last command
(define-key minibuffer-local-map (kbd "C-p") 'previous-history-element)
(define-key minibuffer-local-map (kbd "C-n") 'next-history-element)


#+end_src
* Hydra
#+begin_src emacs-lisp

    (defhydra hydra-text-scale (:timeout 4)
      "scale text"
      ("s" text-scale-increase "in")
      ("t" text-scale-decrease "out")
      ("r" text-scale-set "Equalize")
      ("k" nil "finished" :exit t))


    (defhydra hydra-shape-screen (:timeout 4)
;;  <"h" shrink-window-horizontally "out">
      "adjust window"
      ("r" enlarge-window-horizontally "in")
      ("h" shrink-window-horizontally "out")
      ("t" enlarge-window "up")
      ("s" (enlarge-window -) "down")
      ("d" balance-windows "equalize")
      ("k" nil "finished" :exit t))

#+end_src
* Vertico

** Posframe
#+begin_src emacs-lisp 
 (use-package vertico-posframe
    :config
(setq vertico-multiform-commands
      '((consult-line
         posframe
         (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
         (vertico-posframe-border-width . 10)
         ;; NOTE: This is useful when emacs is used in both in X and
         ;; terminal, for posframe do not work well in terminal, so
         ;; vertico-buffer-mode will be used as fallback at the
         ;; moment.
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (t posframe)))
(vertico-multiform-mode 1))

#+end_src


** V

#+begin_src emacs-lisp
 (use-package vertico
  :bind (:map vertico-map
	   ("C-n" . vertico-next)
	   ("C-p" . vertico-previous)
	   ("C-f" . vertico-exit)
	   :map minibuffer-local-map
	   ("M-h" . backward-kill-word))
  :custom
  (vertico-cycle t)
    :init
  (vertico-mode))

(require 'vertico-posframe)

(use-package vertico-directory
  :after vertico
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
		("TAB" . vertico-directory-enter)
		("DEL" . vertico-directory-delete-char))
		;; Currentyl do not have accesible Meta Key
		;; "M-DEL" . vertico-directory-delete-word
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

(use-package orderless 
  :custom
  (completion-styles '(orderless flex))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

* Eshell

#+begin_src emacs-lisp

(use-package eshell-toggle
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-use-projectile-root t)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-ansi-term))

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.

  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))

#+end_src
* Which-key
#+begin_src emacs-lisp

(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-allow-imprecise-window-fit nil
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))

#+end_src
* Highlight Todo
#+begin_src emacs-lisp
;; This disables magit diff highlights
  (define-globalized-minor-mode my-global-hl-todo-mode hl-todo-mode
    (lambda () (hl-todo-mode 1)))
;    
(use-package hl-todo
  ;; :hook ((org-mode . hl-todo-mode)
  ;;        (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold)))
  (my-global-hl-todo-mode 1)
)
#+end_src
  

* Git Time machine
#+begin_src emacs-lisp

(use-package git-timemachine
  :hook (evil-normalize-keymaps . git-timemachine-hook)
  :config
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-p") 'git-timemachine-show-previous-revision)
    (evil-define-key 'normal git-timemachine-mode-map (kbd "C-n") 'git-timemachine-show-next-revision)
)
#+end_src

* Doom mode line
#+begin_src emacs-lisp
;; (use-package doom-themes
;;   :after doom-themes
;;   :config
  (load-theme 'doom-palenight t)
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :config (setq doom-modeline-height 20
                doom-modeline-bar-width 5
                doom-modeline-perp-name t
                doom-modeline-persp-icon t))
#+end_src
* Avy

#+begin_src emacs-lisp 
;; (defun avy-goto-char-timer ()
;;   (interactive)
;;   (avy-goto-char-timer))

(defun avy-goto-line-same-column ()
  (interactive)
    (avy-goto-char-timer))


;; (declare-function 'avy-goto-char-timer "avy")
;; (evil-define-avy-motion avy-goto-char-timer inclusive)
;; (define-key evil-motion-state-map (kbd "SPC") #'evil-avy-goto-char-timer)

(declare-function 'avy-goto-line-same-column "avy")
(evil-define-avy-motion avy-goto-line-same-column inclusive)
(define-key evil-motion-state-map (kbd "SPC") #'evil-avy-goto-line-same-column)

;; (evil-define-key 'normal avy-mode-map (kbd "SPC") 'avy-goto-char)

#+end_src


* Fonts
#+begin_src emacs-lisp 
; (font-family-list) ; Run this with C-j in a scratch buffer to see all fonts
(set-face-attribute 'default nil :font "Comic Code Ligatures" :height 120)



(use-package all-the-icons
  :config (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)) 
;; This assumes you've installed the package via MELPA.


;; You can set exactly what ligatures you want your font to use
;; This assumes you've installed the package via MELPA.
(use-package ligature
  :config
  ;; Enable all JetBrains Mono ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("-|" "-~" "---" "-<<" "-<" "--" "->" "->>" "-->" "///" "/=" "/=="
                                      "/>" "//" "/*" "*>" "***" "*/" "<-" "<<-" "<=>" "<=" "<|" "<||"
                                      "<|||" "<|>" "<:" "<>" "<-<" "<<<" "<==" "<<=" "<=<" "<==>" "<-|"
                                      "<<" "<~>" "<=|" "<~~" "<~" "<$>" "<$" "<+>" "<+" "</>" "</" "<*"
                                      "<*>" "<->" "<!--" ":>" ":<" ":::" "::" ":?" ":?>" ":=" "::=" "=>>"
                                      "==>" "=/=" "=!=" "=>" "===" "=:=" "==" "!==" "!!" "!=" ">]" ">:"
                                      ">>-" ">>=" ">=>" ">>>" ">-" ">=" "&&&" "&&" "|||>" "||>" "|>" "|]"
                                      "|}" "|=>" "|->" "|=" "||-" "|-" "||=" "||" ".." ".?" ".=" ".-" "..<"
                                      "..." "+++" "+>" "++" "[||]" "[<" "[|" "{|" "??" "?." "?=" "?:" "##"
                                      "###" "####" "#[" "#{" "#=" "#!" "#:" "#_(" "#_" "#?" "#(" ";;" "_|_"
                                      "__" "~~" "~~>" "~>" "~-" "~@" "$>" "^=" "]#"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode 1))

#+end_src
* Direnv
#+begin_src emacs-lisp 
(use-package envrc
 :config
 (envrc-global-mode)
 (with-eval-after-load 'envrc
  (define-key envrc-mode-map (kbd "C-c e") 'envrc-command-map)))
#+end_src
* Projectile
#+begin_src emacs-lisp 
(use-package projectile
  :config
  (projectile-mode 1)

  ;; TODO Figure out what all this chat gpt code does see if you can clean it up
;; (defvar my-last-async-command nil
;;   "Variable to store the last async command executed.")

;; (defun my-save-last-async-command (orig-fun &rest args)
;;   "Advice to save the last async command executed.
;; ORIG-FUN is the original projectile function.
;; ARGS are the arguments passed to the original function."
;;   (let ((command (car args)))
;;     (setq my-last-async-command command)
;;     (apply orig-fun args)))

;; (advice-add 'projectile-run-async-shell-command-in-root :around #'my-save-last-async-command)

;; (defun my-insert-last-async-command ()
;;   "Insert the last async command in the minibuffer."
;;   (when my-last-async-command
;;     (insert my-last-async-command)))

;; (defun my-projectile-run-async-shell-command-in-root ()
;;   "Run `projectile-run-async-shell-command-in-root` with last command pre-inserted."
;;   (interactive)
;;   (minibuffer-with-setup-hook
;;       #'my-insert-last-async-command
;;     (call-interactively #'projectile-run-async-shell-command-in-root)))
;; (with-eval-after-load 'projectile

;;   ;; Unbind the default command in projectile-command-map
;;   (define-key projectile-command-map ["&"] nil)
  
;;   ;; Bind your custom command in projectile-command-map
;;   (define-key projectile-command-map ["&"] 'my-projectile-run-async-shell-command-in-root)
  (define-key projectile-command-map ["A"] 'project-kill-buffers))

#+end_src
* Perspective

#+begin_src emacs-lisp 
(use-package perspective
  :custom
  ;; NOTE! I have also set 'SCP =' to open the perspective menu.
  ;; I'm only setting the additional binding because setting it
  ;; helps suppress an annoying warning message.
  (persp-mode-prefix-key (kbd "C-SPC -"))
  :init 
  (persp-mode)
  :config
  ;; Sets a file to write to when we save states
  (setq persp-state-default-file "~/nix-dotfiles/home-manager/emacs/sessions"))

;; This will group buffers by persp-name in ibuffer.
(add-hook 'ibuffer-hook
          (lambda ()
            (persp-ibuffer-set-filter-groups)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

;; Automatically save perspective states to file when Emacs exits.
(add-hook 'kill-emacs-hook #'persp-state-save)

#+end_src



* Lsp and treesitter
[[https://github.com/emacs-tree-sitter/tree-sitter-langs/releases][Precompiled Binarys]] list of all the grammars youed ever need precompiled
put thses into .emacs.d/treesitter/ and rename them all libtree-sitter-<lang>.so

#+begin_src emacs-lisp 
(use-package treesit
  :commands (treesit-install-language-grammar nf/treesit-install-all-languages)
  :init
  (setq treesit-language-source-alist
   '((bash . ("https://github.com/tree-sitter/tree-sitter-bash"))
     (c . ("https://github.com/tree-sitter/tree-sitter-c"))
     (cpp . ("https://github.com/tree-sitter/tree-sitter-cpp"))
     (css . ("https://github.com/tree-sitter/tree-sitter-css"))
     (go . ("https://github.com/tree-sitter/tree-sitter-go"))
     (html . ("https://github.com/tree-sitter/tree-sitter-html"))
     (javascript . ("https://github.com/tree-sitter/tree-sitter-javascript"))
     (json . ("https://github.com/tree-sitter/tree-sitter-json"))
     (lua . ("https://github.com/Azganoth/tree-sitter-lua"))
     (make . ("https://github.com/alemuller/tree-sitter-make"))
     (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml"))
     (python . ("https://github.com/tree-sitter/tree-sitter-python"))
     (php . ("https://github.com/tree-sitter/tree-sitter-php"))
     (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "typescript/src" "typescript"))
     (ruby . ("https://github.com/tree-sitter/tree-sitter-ruby"))
     (rust . ("https://github.com/tree-sitter/tree-sitter-rust"))
     (sql . ("https://github.com/m-novikov/tree-sitter-sql"))
     (toml . ("https://github.com/tree-sitter/tree-sitter-toml"))
     (zig . ("https://github.com/GrayJack/tree-sitter-zig"))))

  (setq treesit-language-source-alist
   '(
     (ocaml . ("https://github.com/tree-sitter/tree-sitter-ocaml" "master" "src"))
     ))
  :config
  (defun nf/treesit-install-all-languages ()
    "Install all languages specified by `treesit-language-source-alist'."
    (interactive)
    (let ((languages (mapcar 'car treesit-language-source-alist)))
      (dolist (lang languages)
	      (treesit-install-language-grammar lang)
	      (message "`%s' parser was installed." lang)
	      (sit-for 0.75)))))

(add-hook 'tuareg-mode-hook #'tree-sitter-mode)
(add-hook 'tuareg-mode-hook #'tree-sitter-hl-mode)
#+end_src
** Merlin

#+begin_src emacs-lisp
(use-package merlin
  :ensure t
  :config
  (add-hook 'tuareg-mode-hook #'merlin-mode)
  (add-hook 'merlin-mode-hook #'company-mode)
  ;; we're using flycheck instead
  (setq merlin-error-after-save nil)
  :bind (:map merlin-mode-map
("C-c C-u"  . merlin-use)
("C-c C-. C-r"  . merlin-restart-process)))

;; Function to call ocamlformat

(add-hook 'tuareg-mode-hook (lambda ()
                              (add-hook 'before-save-hook 'ocamlformat-before-save)))

(use-package merlin-eldoc 
  :hook ((tuareg-mode) . merlin-eldoc-setup))

(use-package flycheck-ocaml
  :config 
  (flycheck-ocaml-setup))

#+end_src
** Company

* Org mode
** Org fancy

#+begin_src emacs-lisp 
(use-package org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode))

#+end_src
** Actual Org Mode
#+begin_src emacs-lisp 
(use-package org
  :config (setq org-latex-src-block-backend 'engraved)
  (setq org-agenda-files '("~/Documents/org-agenda/"))
  (setq org-todo-keywords        ; This overwrites the default Doom org-todo-keywords
          '((sequence
             "TODO(t)"           ; A task that is ready to be tackled
             "LEET(l)"           ; Leetcode assignments
             "GYM(g)"            ; Things to accomplish at the gym
             "RUN(n)"            ; These are one off things I try to get done by the end of the day
             "BMX(b)"            ; Things to accomplish on the bike
             "PROJ(p)"           ; A project that contains other tasks
             "JOB(j)"            ; Things to accomplish for potential jobs
             "WAIT(w)"           ; Something is holding up this task
             "|"                 ; The pipe necessary to separate "active" states and "inactive" states
             "DONE(d)"           ; Task has been completed
             "CANCELLED(c)" )))  ; Task has been cancelled
  ;; Org agenad variables
(setq org-fancy-priorities-list ' ("🔰" "🟥" "🟧" "🟨"))
(setq org-priority-lowest ?D)


; ("🔴" "🟠" "🟡" "🟢")
; ("🔴" "🟠" "🟡")
; ("♥️" "♦️" "♠️" "♣️")
; ("♦️" "♠️" "♣️")
; ("🟥" "🟧" "🟨")

;; org-fancy-priorities-list '((?A . "❗")
;;                                   (?B . "⬆")
;;                                   (?C . "⬇")
;;                                   (?D . "☕")
;;                                   (?1 . "⚡")
;;                                   (?2 . "⮬")
;;                                   (?3 . "⮮")
;;                                   (?4 . "☕")
;;                                   (?I . "Important"))
(setq org-agenda-custom-commands
      '(("v" "A better agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (tags "PRIORITY=\"B\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
          (tags "PRIORITY=\"C\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Low-priority unfinished tasks:")))
          (tags "customtag"
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "Tasks marked with customtag:")))

          (agenda "")
          (alltodo "")))))

(setq org-agenda-block-separator 8411) ; this is a special char seperator for the agenda view
;; Org capture templates
(setq malcolm/org-agenda-directory "~/Documents/org-agenda/")

(setq org-capture-templates
       `(("t" "todo" entry (file ,(concat malcolm/org-agenda-directory "agenda.org" ))
	  "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
	 ("m" "Meeting" entry (file ,(concat malcolm/org-agenda-directory "journal.org" ))
	  "* MEETING with %? :MEETING:\n%t" :clock-in t :clock-resume t)
	 ("d" "Diary" entry (file+datetree (concat malcolm/org-agenda-directory "agenda.org" ))
	  "* %?\n%U\n" :clock-in t :clock-resume t)
	 ("i" "Idea" entry (file ,(concat malcolm/org-agenda-directory "agenda.org" ) )
	  "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
	 ("n" "Next Task" entry (file+headline ,(concat malcolm/org-agenda-directory "agenda.org" ) "Tasks")
	  "** NEXT [#A] %? \nDEADLINE: %t") ))

;; Allows refile to look at subheadings
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
  ;; Org agenda table
(setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
:bind
(("M-n" . org-metaleft)
("M-a" . org-metadown)
("M-i" . org-metaup)
("M-o" . org-metaright)

("M-S-n" . org-shiftmetaleft)
("M-S-a" . org-shiftmetadown)
("M-S-i" . org-shiftmetaup)
("M-S-o" . org-shiftmetaright)
("M-N" . org-shiftmetaleft)
("M-A" . org-shiftmetadown)
("M-I" . org-shiftmetaup)
("M-O" . org-shiftmetaright)
)
)

(defun jethro/org-agenda-process-inbox-item ()
  "Process a single item in the org-agenda."
  (org-with-wide-buffer
   (org-agenda-set-tags)
   (org-agenda-priority)
   (call-interactively 'jethro/my-org-agenda-set-effort)
   (org-agenda-refile nil nil t)))




#+end_src

* Regex builder
This is a useful tool for building regulare expressions

#+begin_src emacs-lisp
(setq reb-re-syntax 'string)
#+end_src
* Org-babel
#+begin_src emacs-lisp
(require 'org-tempo) 
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
 (shell . t)
(awk . t)
(clojure . t)
(scheme . t)
))

(setq org-confirm-babel-evaluate nil)
#+end_src
* Org drill
#+begin_src emacs-lisp
(use-package org-drill)

#+end_src
* Org-roam

#+begin_src emacs-lisp
(use-package org-roam
  :init (org-roam-db-autosync-mode))
#+end_src
* Makedown mode
#+begin_src emacs-lisp

(use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))

#+end_src

* PDF tools
#+begin_src emacs-lisp
(pdf-tools-install)

;; TODO Turn off evil mode in pdf bufferj
;; (defun adjust-evil-mode-for-pdfs ()
;;   "Temporarily suspend Evil mode in PDF buffers, restore upon exit."
;;   (if (eq major-mode 'pdf-view-mode)
;;       (evil-emacs-state) ;; Switch to Emacs state in PDF buffers
;;     (unless (eq evil-state 'emacs)
;;       (evil-normal-state)))) ;; Return to previous Evil state if not in Emacs state
;; (add-hook 'buffer-list-update-hook 'adjust-evil-mode-for-pdfs)
#+end_src

* Nix mode
#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")

#+end_src


* Ansi colors in comp
#+begin_src emacs-lisp
(use-package ansi-color
  :config
  (setq ansi-color-for-comint-mode t)
  (setenv "TERM" "xterm-256color") ;; needed to make colors appear in compilation buffer
:hook (compilation-filter . ansi-color-compilation-filter))
#+end_src

* eglot
#+begin_src emacs-lisp
(use-package eglot
:hook ((python . eglot-ensure)
       (js-mode . elgot-ensure)
       (html-mode . elgot-ensure))
:config
  (add-to-list 'eglot-server-programs '(python-mode . ("pyright-langserver" "--stdio")))

  ;; JavaScript - Assuming you're using a language server like js-ts-ls or similar
  (add-to-list 'eglot-server-programs '(js-mode . ("typescript-language-server" "--stdio")))
  
  ;; HTML - Using vscode-html-languageserver
  (add-to-list 'eglot-server-programs '(html-mode . ("vscode-html-languageserver" "--stdio"))))
;; Python auto formatting
(use-package python-black
  :demand t
  :after python
  :hook (python-mode . python-black-on-save-mode-enable-dwim))
#+end_src

* company
#+begin_src emacs-lisp
(use-package company
  :ensure t
  :config
  (global-company-mode 1) ; Enable Company mode globally
  (setq company-minimum-prefix-length 1
        company-idle-delay 0.0)) ; Adjust as per your preference


#+end_src

* smerge mode
#+begin_src emacs-lisp
(use-package smerge-mode
  :ensure nil
  :init
  (setq smerge-command-prefix "C")

  :config
  ;; https://github.com/alphapapa/unpackaged.el#smerge-mode
  (defhydra hydra/smerge
    (:color pink :hint nil :post (smerge-auto-leave))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("q" nil "cancel" :color blue))

  :bind (("C-c c" . hydra/smerge/body))
  )
#+end_src

#+RESULTS:
: hydra/smerge/body
